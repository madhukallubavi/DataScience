A pre-trained model can be used directly to classify new photographs as one of the 1,000 known
classes in the image classification task in the ILSVRC. We will use the VGG16 model to classify
new images. First, the photograph needs to loaded and reshaped to a 224×224 square, expected
by the model, and the pixel values scaled in the way expected by the model. The model operates
on an array of samples, therefore the dimensions of a loaded image need to be expanded by 1,
for one image with 224 × 224 pixels and three channels.

Next, the model can be loaded and a prediction made. This means that a predicted
probability of the photo belonging to each of the 1,000 classes is made. In this example, we are
only concerned with the most likely class, so we can decode the predictions and retrieve the
label or name of the class with the highest probability.

#Using pre-trained model (VGG16) as classifier
from keras.preprocessing.image import load_img, img_to_array
from keras.applications.vgg16 import preprocess_input, decode_predictions, VGG16

#load image
image = load_img('dog.jpg', target_size=(224,224))

#convert image pixels to numpy array
image = img_to_array(image)

#reshape date for model
image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))

#prepare image for VGG model
image = preprocess_input(image)

#load model
model = VGG16()

#predict probability across all output classes
yhat = model.predict(image)

#convert probabilities to class labels
label = decode_predictions(yhat)

#retrieve most likely result, e.g. highest probability
label = label[0][0]

#print classification
print('%s (%.2f%%)' % (label[1], label[2]*100))

import warnings
warnings.simplefilter('ignore')

Results:
Doberman (33.59%)

Running the example predicts more than just dog; it also predicts the specific breed of
Doberman with a probability of 33.59%, which may, in fact, be correct.
