CNN excel at learning the spatial structure in input data. The IMDB review data does have
a one-dimensional spatial structure in the sequence of words in reviews and the CNN may be
able to pick out invariant features for good and bad sentiment. This learned spatial features
may then be learned as sequences by an LSTM layer. We can easily add a one-dimensional CNN and 
max pooling layers after the Embedding layer which then feed the consolidated features to the LSTM.
We can use a smallish set of 32 features with a small filter length of 3. The pooling layer can use
the standard length of 2 to halve the feature map size. For example, we would create the model as follows:

#LSTM and CNN for sequence classification in the IMDB dataset
import numpy as np
from keras.datasets import imdb
from keras.models import Sequential
from keras.layers import Dense, LSTM
from keras.layers.convolutional import Conv1D, MaxPooling1D
from keras.layers.embeddings import Embedding
from keras.preprocessing import sequence

#fix random seed for reproducibility
np.random.seed(42)

#load the dataset but only keep the top n words, zero the rest
top_words = 5000
(X_train, Y_train), (X_test, Y_test) = imdb.load_data(num_words=top_words)

# truncate and pad input sequences
max_review_length = 500
X_train = sequence.pad_sequences(X_train, maxlen=max_review_length)
X_test = sequence.pad_sequences(X_test, maxlen=max_review_length)

#create the model
embedding_vecor_length = 32
model = Sequential()
model.add(Embedding(top_words, embedding_vecor_length, input_length=max_review_length))
model.add(Conv1D(filters=32, kernel_size=3, padding='same', activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(LSTM(100))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
print(model.summary())
model.fit(X_train, Y_train, epochs=3, batch_size=64)

#Final evaluation of the model
scores = model.evaluate(X_test, Y_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

Results:
Epoch 1/3
25000/25000 [==============================] - 141s 6ms/step - loss: 0.4339 - acc: 0.7856
Epoch 2/3
25000/25000 [==============================] - 138s 6ms/step - loss: 0.2462 - acc: 0.9046
Epoch 3/3
25000/25000 [==============================] - 137s 5ms/step - loss: 0.1993 - acc: 0.9232
Accuracy: 87.93%

We can see that we achieve similar results to the first example although with less weights and
faster training time. I would expect that even better results could be achieved if this example
was further extended to use dropout.
