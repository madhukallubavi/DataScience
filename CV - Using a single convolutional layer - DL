Next, we can define a model that expects input samples to have the shape (8, 8, 1) and
has a single hidden convolutional layer with a single filter with the shape of three pixels by
three pixels.

The filter is initialized with random weights as part of the initialization of the model. We
will overwrite the random weights and hard code our own 3 × 3 filter that will detect vertical
lines. That is, the filter will strongly activate when it detects a vertical line and weakly activate
when it does not. We expect that by applying this filter across the input image, the output
feature map will show that the vertical line was detected.

The result is a four-dimensional output with one batch, a given number of rows and columns,
and one filter, or [batch, rows, columns, filters]. We can print the activations in the
single feature map to confirm that the line was detected.

#Using a single convolutional layer
from numpy import asarray
from keras.models import Sequential
from keras.layers import Conv2D

#define input data
data = [[0, 0, 0, 1, 1, 0, 0, 0],
[0, 0, 0, 1, 1, 0, 0, 0],
[0, 0, 0, 1, 1, 0, 0, 0],
[0, 0, 0, 1, 1, 0, 0, 0],
[0, 0, 0, 1, 1, 0, 0, 0],
[0, 0, 0, 1, 1, 0, 0, 0],
[0, 0, 0, 1, 1, 0, 0, 0],
[0, 0, 0, 1, 1, 0, 0, 0]]
data = asarray(data)
data = data.reshape(1, 8, 8, 1)

#create model
model = Sequential()
model.add(Conv2D(1, (3,3), input_shape=(8, 8, 1)))

#summarize model
model.summary()

#define a vertical line detector
detector = [[[[0]],[[1]],[[0]]],
[[[0]],[[1]],[[0]]],
[[[0]],[[1]],[[0]]]]
weights = [asarray(detector), asarray([0.0])]

#store the weights in the model
model.set_weights(weights)

#apply filter to input data
yhat = model.predict(data)

#enumerate rows
for r in range(yhat.shape[1]):
  #print each column in the row
  print([yhat[0,r,c,0] for c in range(yhat.shape[2])])

Results:
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_2 (Conv2D)            (None, 6, 6, 1)           10        
=================================================================
Total params: 10
Trainable params: 10
Non-trainable params: 0
_________________________________________________________________
[0.0, 0.0, 3.0, 3.0, 0.0, 0.0]
[0.0, 0.0, 3.0, 3.0, 0.0, 0.0]
[0.0, 0.0, 3.0, 3.0, 0.0, 0.0]
[0.0, 0.0, 3.0, 3.0, 0.0, 0.0]
[0.0, 0.0, 3.0, 3.0, 0.0, 0.0]
[0.0, 0.0, 3.0, 3.0, 0.0, 0.0]

Running the example first summarizes the structure of the model. Of note is that the single
hidden convolutional layer will take the 8 × 8 pixel input image and will produce a feature map
with the dimensions of 6 × 6. We will go into why this is the case in the next section. We can
also see that the layer has 10 parameters, that is nine weights for the filter (3 × 3) and one
weight for the bias. Finally, the feature map is printed. We can see from reviewing the numbers
in the 6 × 6 matrix that indeed the manually specified filter detected the vertical line in the
middle of our input image.
