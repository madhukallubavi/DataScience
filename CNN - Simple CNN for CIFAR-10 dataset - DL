The CIFAR-10 problem is best solved using a convolutional neural network (CNN). We can
quickly start of by importing all of the classes and functions we will need in this example.

#Simple CNN model for CIFAR-10 dataset
import numpy as np
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.constraints import maxnorm
from keras.optimizers import SGD
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.utils import np_utils
from keras import backend as K
K.set_image_dim_ordering('th')

#fix random seed for reproducibility
seed = 42
np.random.seed(seed)

#load data
(X_train, Y_train), (X_test, Y_test) = cifar10.load_data()

#normalize inputs from 0-255 to 0.0-1.0
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train = X_train/255.0
X_test = X_test/255.0

#one hot encode outputs
Y_train = np_utils.to_categorical(Y_train)
Y_test = np_utils.to_categorical(Y_test)
num_classes = Y_test.shape[1]

#create model
model = Sequential()
model.add(Conv2D(32, (3,3), input_shape=(3,32,32), padding='same', activation='relu',
    kernel_constraint=maxnorm(3)))
model.add(Dropout(0.2))
model.add(Conv2D(32, (3,3), activation='relu', padding='same',
    kernel_constraint=maxnorm(3)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(512, activation='relu', kernel_constraint=maxnorm(3)))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

#compile model
epochs=25
lrate=0.01
decay=lrate/epochs
sgd = SGD(lr=lrate, momentum=0.9, decay=decay, nesterov=False)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
print(model.summary())

#Fit model
model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=epochs, batch_size=32)

#Final evaluation of model
scores = model.evaluate(X_test, Y_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

Results:
Epoch 20/25
50000/50000 [==============================] - 19s 381us/step - loss: 0.3671 - acc: 0.8696 - val_loss: 0.9903 - val_acc: 0.7037
Epoch 21/25
50000/50000 [==============================] - 19s 377us/step - loss: 0.3501 - acc: 0.8764 - val_loss: 0.9948 - val_acc: 0.7010
Epoch 22/25
50000/50000 [==============================] - 18s 365us/step - loss: 0.3359 - acc: 0.8812 - val_loss: 0.9974 - val_acc: 0.7044
Epoch 23/25
50000/50000 [==============================] - 19s 385us/step - loss: 0.3191 - acc: 0.8867 - val_loss: 1.0146 - val_acc: 0.7055
Epoch 24/25
50000/50000 [==============================] - 19s 389us/step - loss: 0.3022 - acc: 0.8937 - val_loss: 1.0253 - val_acc: 0.7044
Epoch 25/25
50000/50000 [==============================] - 20s 398us/step - loss: 0.2874 - acc: 0.8983 - val_loss: 1.0204 - val_acc: 0.7063
Accuracy: 70.63%

The classification accuracy and loss is printed each epoch on both the training and test
datasets. The model is evaluated on the test set and achieves an accuracy of 70.63%, which is
good but not excellent.
