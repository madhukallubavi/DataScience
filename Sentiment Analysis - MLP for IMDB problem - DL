We can start of by developing a simple Multilayer Perceptron model with a single hidden layer.
The word embedding representation is a true innovation and we will demonstrate what would
have been considered world class results in 2011 with a relatively simple neural network. Let's
start of by importing the classes and functions required for this model and initializing the
random number generator to a constant value to ensure we can easily reproduce the results.

#MLP for IMDB problem
import numpy as np
from keras.datasets import imdb
from keras.models import Sequential
from keras.layers import Dense, Flatten
from keras.layers.embeddings import Embedding
from keras.preprocessing import sequence

# fix random seed for reproducibility
seed = 42
np.random.seed(seed)

# load the dataset but only keep the top n words, zero the rest
top_words = 5000
(X_train, Y_train), (X_test, Y_test) = imdb.load_data(num_words=top_words)
max_words = 500
X_train = sequence.pad_sequences(X_train, maxlen=max_words)
X_test = sequence.pad_sequences(X_test, maxlen=max_words)

# create the model
model = Sequential()
model.add(Embedding(top_words, 32, input_length=max_words))
model.add(Flatten())
model.add(Dense(250, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

#compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
print(model.summary())

# Fit the model
model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=2, batch_size=128,
verbose=2)

# Final evaluation of the model
scores = model.evaluate(X_test, Y_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

results:
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
embedding_6 (Embedding)      (None, 500, 32)           160000    
_________________________________________________________________
flatten_6 (Flatten)          (None, 16000)             0         
_________________________________________________________________
dense_11 (Dense)             (None, 250)               4000250   
_________________________________________________________________
dense_12 (Dense)             (None, 1)                 251       
=================================================================
Total params: 4,160,501
Trainable params: 4,160,501
Non-trainable params: 0
_________________________________________________________________
None
Train on 25000 samples, validate on 25000 samples
Epoch 1/2
 - 33s - loss: 0.5108 - acc: 0.7056 - val_loss: 0.3268 - val_acc: 0.8577
Epoch 2/2
 - 32s - loss: 0.1894 - acc: 0.9284 - val_loss: 0.3030 - val_acc: 0.8718
Accuracy: 87.18%

Running this example fits the model and summarizes the estimated performance. We can
see that this very simple model achieves a score of nearly 87.18% which is in the neighborhood
of the original paper, with very little effort.
