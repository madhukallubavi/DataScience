Recurrent Neural networks like LSTM generally have the problem of overfitting. Dropout can
be applied between layers using the Dropout Keras layer. We can do this easily by adding new
Dropout layers between the Embedding and LSTM layers and the LSTM and Dense output layers.

#LSTM with Dropout for sequence classification in the IMDB dataset
import numpy as np
from keras.datasets import imdb
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
from keras.layers.embeddings import Embedding
from keras.preprocessing import sequence

#fix random seed for reproducibility
np.random.seed(42)

#load the dataset but only keep the top n words, zero the rest
top_words = 5000
(X_train, Y_train), (X_test, Y_test) = imdb.load_data(num_words=top_words)

#truncate and pad input sequences
max_review_length = 500
X_train = sequence.pad_sequences(X_train, maxlen=max_review_length)
X_test = sequence.pad_sequences(X_test, maxlen=max_review_length)

#create the model
embedding_vecor_length = 32
model = Sequential()
model.add(Embedding(top_words, embedding_vecor_length, input_length=max_review_length))
model.add(Dropout(0.2))
model.add(LSTM(100))
model.add(Dropout(0.2))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
print(model.summary())
model.fit(X_train, Y_train, epochs=3, batch_size=64)

# Final evaluation of the model
scores = model.evaluate(X_test, y_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))

Results:
Epoch 1/3
25000/25000 [==============================] - 385s 15ms/step - loss: 0.4824 - acc: 0.7583
Epoch 2/3
25000/25000 [==============================] - 380s 15ms/step - loss: 0.3539 - acc: 0.8532
Epoch 3/3
25000/25000 [==============================] - 381s 15ms/step - loss: 0.2678 - acc: 0.8935
Accuracy: 86.98%

