
Manual k-Fold Cross-Validation:

The gold standard for machine learning model evaluation is k-fold cross-validation. It provides
a robust estimate of the performance of a model on unseen data. It does this by splitting the
training dataset into k subsets and takes turns training models on all subsets except one which
is held out, and evaluating model performance on the held out validation dataset. The process
is repeated until all subsets are given an opportunity to be the held out validation set. The
performance measure is then averaged across all models that are created.

#MLP for diabetes dataset with 10-fold cross validation
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import StratifiedKFold
import numpy as np
import pandas as pd

#fix random seed for reproducibility
seed = 7
np.random.seed(seed)

#load diabetes dataset
data = pd.read_csv('diabetes.csv')
array = data.values

#split into input(X) and output(Y) variables
X = array[:,0:8]
Y = array[:,8]

#define 10-fold cross validation test harness
kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=seed)
cvscores = []
for train, test in kfold.split(X,Y):
  #create model
  model = Sequential()
  model.add(Dense(12, input_dim=8, activation='relu'))
  model.add(Dense(8, activation='relu'))
  model.add(Dense(1, activation='sigmoid'))
  
  #compile model
  model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
  
  #fit model
  model.fit(X[train], Y[train], epochs=150, batch_size=10, verbose=0)
  
  #evaluate model
  scores = model.evaluate(X[train], Y[train], verbose=0)
  print("%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))
  cvscores.append(scores[1]*100)

print("%.2f%% (+/- %.2f%%)" % (np.mean(cvscores), np.std(cvscores)))


Results:
acc: 78.87%
acc: 78.58%
acc: 78.15%
acc: 76.56%
acc: 76.85%
acc: 65.12%
acc: 65.27%
acc: 65.12%
acc: 69.65%
acc: 77.17%
73.13% (+/- 5.76%)

Notice that we had to re-create the model each loop to then fit and evaluate it with the data
for the fold. We will look at how we can use Keras models natively with the
scikit-learn machine learning library.
