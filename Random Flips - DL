Another augmentation to our image data that can improve performance on large and complex problems
is to create random flips of images in our training data. Keras supports random flipping along both
the vertical and horizontal axes using the vertical flip and horizontal flip arguments.

#Random Flips
from keras.datasets import mnist
from keras.preprocessing.image import ImageDataGenerator
from matplotlib import pyplot as plt
from keras import backend as K
K.set_image_dim_ordering('th')

#load data
(X_train, Y_train), (X_test, Y_test) = mnist.load_data()

#reshape to be [samples][pixels][width][height]
X_train = X_train.reshape(X_train.shape[0], 1, 28, 28)
X_test = X_test.reshape(X_test.shape[0], 1, 28, 28)

#convert from integer to float
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

#define data preperation
datagen = ImageDataGenerator(horizontal_flip=True, vertical_flip=True)

#fit paramenters from data
datagen.fit(X_train)

#configure batch size and retrieve one batch of images
for X_batch, Y_batch in datagen.flow(X_train, Y_train, batch_size=9):
  #create a grid of 3x3 images
  for i in range(0,9):
    plt.subplot(330 + 1 + i)
    plt.imshow(X_batch[i].reshape(28,28), cmap=plt.get_cmap('gray'))
  #show plot
  plt.show()
  break

Running this example we can see flipped digits. Flipping digits in MNIST is not useful as
they will always have the correct left and right orientation, but this may be useful for
problems with photographs of objects in a scene that can have a varied orientation.
