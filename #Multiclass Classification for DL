#Multiclass Classification with the Iris Flowers Dataset
import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder

#Fix random seed for reproducibility
seed = 42
np.random.seed(seed)

#load iris dataset
data = pd.read_csv('Iris.csv')
array = data.values
X = array[:,0:4]
Y = array[:,4]

#encode class values as integers
encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)

#convert integers to dummy variables (i.e. one hot encoded)
dummy_Y = np_utils.to_categorical(encoded_Y)

#define baseline model
def baseline_model():
  #create model
  model = Sequential()
  model.add(Dense(8, input_dim=4, activation='relu'))
  model.add(Dense(3, activation='softmax'))
  #compile model
  model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
  return model
estimator = KerasClassifier(build_fn=baseline_model, epochs=200, batch_size=5, verbose=0)
kfold = KFold(n_splits=10, shuffle=True, random_state=seed)
results = cross_val_score(estimator, X, dummy_Y, cv=kfold)
print("Accuracy: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))

Results:
Accuracy: 98.00% (3.06%)


The results are summarized as both the mean and standard deviation of the model accuracy
on the dataset. This is a reasonable estimation of the performance of the model on unseen data.
It is also within the realm of known top results for this problem.
