It is also possible to standardize pixel values across the entire dataset. This is called feature stan-
dardization and mirrors the type of standardization often performed for each column in a tabular
dataset. This is different to sample standardization described in the previous section as pixel val-
ues are standardized across all samples (all images in the dataset). In this case each image is con-
sidered a feature. You can perform feature standardization by setting the featurewise center
and featurewise std normalization arguments on the ImageDataGenerator class.

#Standrsize image across the dataset, mean=0, std=1
from keras.datasets import mnist
from keras.preprocessing.image import ImageDataGenerator
from matplotlib import pyplot as plt
from keras import backend as K
K.set_image_dim_ordering('th')

# load data
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# reshape to be [samples][pixels][width][height]
X_train = X_train.reshape(X_train.shape[0], 1, 28, 28)
X_test = X_test.reshape(X_test.shape[0], 1, 28, 28)

# convert from int to float
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

# define data preparation
datagen = ImageDataGenerator(featurewise_center=True, featurewise_std_normalization=True)

# fit parameters from data
datagen.fit(X_train)

# configure batch size and retrieve one batch of images
for X_batch, y_batch in datagen.flow(X_train, y_train, batch_size=9):
  # create a grid of 3x3 images
  for i in range(0, 9):
    plt.subplot(330 + 1 + i)
    plt.imshow(X_batch[i].reshape(28, 28), cmap=plt.get_cmap('gray'))
  # show the plot
  plt.show()
  break


Running this example you can see that the effect on the actual images, seemingly darkening
and lightening different digits.
