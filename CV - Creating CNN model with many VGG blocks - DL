Using VGG blocks in your own models should be common because they are so simple and
effective. We can expand the example and demonstrate a single model that has three VGG
blocks, the first two blocks have two convolutional layers with 64 and 128 filters respectively,
the third block has four convolutional layers with 256 filters. This is a common usage of VGG
blocks where the number of filters is increased with the depth of the model. The complete code
listing is provided below.

#Creating CNN model with many VGG blocks
from keras.models import Model
from keras.layers import Input, Conv2D, MaxPooling2D
from keras.utils import plot_model

#function for creating a vgg block
def vgg_block(layer_in, n_filters, n_conv):
  #add convolutional layers
  for _ in range(n_conv):
    layer_in = Conv2D(n_filters, (3,3), padding='same', activation='relu')(layer_in)
  #add max pooling layer
  layer_in = MaxPooling2D((2,2), strides=(2,2))(layer_in)
  return layer_in

#define model input
visible = Input(shape=(256, 256, 3))
#add vgg module
layer = vgg_block(visible, 64, 2)
# add vgg module
layer = vgg_block(layer, 128, 2)
# add vgg module
layer = vgg_block(layer, 256, 4)

#create model
model = Model(inputs=visible, outputs=layer)

#summarize model
model.summary()

#plot model architecture
plot_model(model, show_shapes=True, to_file='multiple_vgg_blocks.png')

Results:
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_8 (InputLayer)         (None, 256, 256, 3)       0         
_________________________________________________________________
conv2d_15 (Conv2D)           (None, 256, 256, 64)      1792      
_________________________________________________________________
conv2d_16 (Conv2D)           (None, 256, 256, 64)      36928     
_________________________________________________________________
max_pooling2d_8 (MaxPooling2 (None, 128, 128, 64)      0         
_________________________________________________________________
conv2d_17 (Conv2D)           (None, 128, 128, 128)     73856     
_________________________________________________________________
conv2d_18 (Conv2D)           (None, 128, 128, 128)     147584    
_________________________________________________________________
max_pooling2d_9 (MaxPooling2 (None, 64, 64, 128)       0         
_________________________________________________________________
conv2d_19 (Conv2D)           (None, 64, 64, 256)       295168    
_________________________________________________________________
conv2d_20 (Conv2D)           (None, 64, 64, 256)       590080    
_________________________________________________________________
conv2d_21 (Conv2D)           (None, 64, 64, 256)       590080    
_________________________________________________________________
conv2d_22 (Conv2D)           (None, 64, 64, 256)       590080    
_________________________________________________________________
max_pooling2d_10 (MaxPooling (None, 32, 32, 256)       0         
=================================================================
Total params: 2,325,568
Trainable params: 2,325,568
Non-trainable params: 0
_________________________________________________________________

Again, running the example summarizes the model architecture and we can clearly see the
pattern of VGG blocks.
